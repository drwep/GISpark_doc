{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 地理空间信息数据处理\n",
    "  \n",
    "本章介绍地理空间数据的GeoJSON格式规范和使用方法，Python中进行地理几何数据处理的GeoPandas、Shapely、GDAL库，以及专业GIS的脚本引擎-GIScript。最后，介绍通过使用这些技术进行OpenStreetMap、SRTM和TM等开放的免费数据的处理过程和方法。\n",
    "\n",
    "## 地理空间数据格式\n",
    "### GeoJSON 规范\n",
    "[GeoJSON](geospatial/geojson/geojson.ipynb)是一种对各种地理数据结构进行编码的格式。GeoJSON对象可以表示几何、特征或者特征集合。GeoJSON支持下面几何类型：点、线、面、多点、多线、多面和几何集合。GeoJSON里的特征包含一个几何对象和其他属性，特征集合表示一系列特征。\n",
    "\n",
    "### GeoJSON 编程\n",
    "Python的词典和列表、元组等数据结构可以直接与JSON映射。GeoJSON完全遵循JSON规范，因此GeoJSON很容易[通过Python编程操作](geospatial/geojson/pygeojson.ipynb)，并且与Shapeply、Fiona、GeoPandas组合使用，完成地理空间对象和文件的I/O操作。GDAL和很多商业GIS软件也都支持GeoJSON，可以非常方便地进行数据交换，尤其是在网络服务中，有逐渐取代其它格式的趋势。\n",
    "\n",
    "### GeoCSV 格式\n",
    "Hadoop和Spark为了便于分布式处理中数据切分，都主要按照分行处理方式设计。因此，空间数据经常保存为[空间数据CSV格式](geospatial/geojson/geocsv.ipynb)，方便在分布式环境下使用。CSV格式数据域一般以`\"`分隔和表格符`\\t`两种常见格式，而几何对象一般采用[WKT(well known text)](geospatial/geojson/geowkt.ipynb)、WKB(WKT的二进制编码)或GeoJSON格式存储，每行以回车结束。\n",
    "\n",
    "## 几何对象与地图绘制\n",
    "\n",
    "### Matplotlib绘制地图\n",
    "Matplotlib是Python上广泛使用的绘图库，支持在Jupyter Notebook中绘图，安装basemap包后，可以直接[使用Matplotlib绘制地图](geospatial/matplotlib/mpl_basemap.ipynb)。\n",
    "\n",
    "### GeoPandas内存数据集\n",
    "[GeoPandas内存数据集](geospatial/geopandas/geopandas.ipynb)派生于Pandas数据类，增加GeoSeries对象，可以存储Geometry地理空间几何对象。GeoPandas的Geometry对象采用GeoJSON格式存储，非常便于在Python中操作，详细请参考[GeoPandas.org](http://www.GeoPandas.org)。\n",
    "\n",
    "### Shapely几何对象运算\n",
    "[Shapely](geospatial/shapely.ipynb)提供地理几何对象数据结构、编解码及对象之间的几何代数运算。[Shapely工程源代码](https://github.com/Toblerity/Shapely.git)可以直接下载、编译、安装，文档参见：http://toblerity.org/shapely/project.html。\n",
    "\n",
    "### Fiona几何对象操作\n",
    "[Fiona库](geospatial/fiona.ipynb)提供几何对象操作和Shape文件的读写功能，基于OGR实现的简洁的Python API对象接口，详情可以查看[文档](http://toblerity.org/fiona/README.html#usage)和[源代码](https://github.com/Toblerity/Fiona)。\n",
    "\n",
    "\n",
    "## GDAL库安装与使用\n",
    "[GDAL](http://www.gdal.org)是一个广泛使用的地理空间数据对象和文件读写的支持库，其本身完全开源而且被整合到了很多开源软件和商业GIS软件中，详情查看[GDAL库安装与使用](geospatial/gdal/gdal-geometry.ipynb)，可以查看和下载[GDAL的Geometry使用](http://nbviewer.jupyter.org/github/supergis/git_notebook/blob/master/gdal/gdal-geometry.ipynb)教程进行研究和练习。\n",
    "\n",
    "## GIScript安装与使用\n",
    "GIScript是专业GIS脚本引擎，提供数据交换、数据管理、制图和分析等丰富的功能，支持在Jupyter notebook和Spark环境下使用，支持Linux和Windows操作系统，请参考[GIScript安装与使用](geospatial/giscript/giscript_quickstart.ipynb)。\n",
    "\n",
    "## OSM开源地图数据处理\n",
    "OSM是[OpenStreetMap](http://www.openstreetmap.org)的众包开放地图，原始数据采用xml格式进行存储。这里提供的教程包括：[OSM数据下载与结构分析](geospatial/openstreetmap/osm-discovery.ipynb)、[Overpass在线API使用](geospatial/openstreetmap/osm-overpass-node.ipynb)、[OSM流式转为行存储JSON](geospatial/openstreetmap/osm-extract2json.ipynb),所生成的行式存储数据可以在PySpark中数据查询[构建Geometry](geospatial/openstreetmap/osm-spark.ipynb)和进行更高级的组合分析。\n",
    "\n",
    "## SRTM地形高程数据处理\n",
    "这里介绍[SRTM地形高程数据处理](geospatial/srtm/srtm_usgs.ipynb)方法，将实现数据的下载、转为GeoTif、设置投影等基本操作，以及进行渲染立体图、解译等高线等高级功能。\n",
    "\n",
    "## 影像数据处理与挖掘\n",
    "Python中有丰富的影像处理模块，这里以TM影像处理为例，进行影像处理方法的介绍。影像的高级处理、土地分类、对象识别、机器学习等将在后续的专题中另行介绍。  \n",
    "[Rasterio](https://github.com/mapbox/rasterio.git)是读写地理空间信息栅格数据集的工具。Rasterio采用GDAL进行文件I/O和栅格文件格式的操作。典型功能是接受和返回Numpy的ndarray数据对象。Rasterio设计为提高地理空间栅格文件处理的生产率，让其处理变得更有趣。"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
