{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import os\n",
    "import lxml\n",
    "from lxml import etree\n",
    "import xmltodict, sys, gc\n",
    "from pymongo import MongoClient\n",
    "#help(lxml.etree._Element)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 快速遍历xml文档，采用递归器模式。\n",
    "```\n",
    "context = etree.iterparse(infile, events=('end',), tag='Title')  \n",
    "for event, elem in context:  \n",
    "       out.write('%s\\n' % elem.text.encode('utf-8'))\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 递归读取osm文件，写入mongoDB。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'MongoClient' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-1-5f8795d80dfe>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[0;32m      3\u001b[0m \u001b[1;31m#sys.setdefaultencoding(\"utf-8\")\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      4\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 5\u001b[1;33m \u001b[0mclient\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mMongoClient\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      6\u001b[0m \u001b[0mdb\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mclient\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mre\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      7\u001b[0m \u001b[0mstreetsDB\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mdb\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mstreets\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mNameError\u001b[0m: name 'MongoClient' is not defined"
     ]
    }
   ],
   "source": [
    "#Ultimate fix of life.\n",
    "#reload(sys)\n",
    "#sys.setdefaultencoding(\"utf-8\")\n",
    "\n",
    "client = MongoClient()\n",
    "db = client.re\n",
    "streetsDB = db.streets\n",
    "\n",
    "hwTypes = ['motorway', 'trunk', 'primary', 'secondary', 'tertiary', 'pedestrian', 'unclassified', 'service']\n",
    "\n",
    "#Enable Garbadge Collection\n",
    "gc.enable()\n",
    "\n",
    "# http://www.ibm.com/developerworks/xml/library/x-hiperfparse/\n",
    "# Author: Liza Daly\n",
    "def fast_iter(context, func):\n",
    "    print('Process...')\n",
    "    placement = 1\n",
    "    for event, elem in context:\n",
    "        placement += 1\n",
    "        #if (placement>=10): break\n",
    "        #print(placement,)\n",
    "                \n",
    "        func(elem)\n",
    "        elem.clear()\n",
    "        while elem.getprevious() is not None:\n",
    "            del elem.getparent()[0]\n",
    "    del context\n",
    "\n",
    "fnode = open(\"../data/fnode.txt\",\"w+\")\n",
    "fway = open(\"../data/fway.txt\",\"w+\")\n",
    "frelation = open(\"../data/frelation.txt\",\"w+\")\n",
    "\n",
    "def process_element(elem):\n",
    "    #print(str(elem.attrib))\n",
    "    if (elem.tag==\"node\"): \n",
    "        fnode.write((etree.tostring(elem).decode('utf-8'))+\"\\r\\n\")\n",
    "    elif (elem.tag==\"way\"): \n",
    "        fway.write((etree.tostring(elem).decode('utf-8'))+\"\\r\\n\")\n",
    "    elif (elem.tag==\"relation\"): \n",
    "        frelation.write((etree.tostring(elem)).decode('utf-8')+\"\\r\\n\")\n",
    "    data = etree.tostring(elem)\n",
    "    #data = etree.tostring(elem)\n",
    "    #data = xmltodict.parse(data)\n",
    "\n",
    "    #print(data.decode('ascii'))\n",
    "    #print(str(elem))\n",
    "'''\n",
    "    data = xmltodict.parse(data)\n",
    "    keys = data['way'].keys()\n",
    "    if 'tag' in keys:\n",
    "        if isinstance(data['way']['tag'], dict):\n",
    "                    if data['way']['tag']['@k'] == 'highway':\n",
    "                        if data['way']['tag']['@v'] in hwTypes:\n",
    "                            streetsDB.insert(data)\n",
    "        else:\n",
    "            for y in data['way']['tag']:\n",
    "                if y['@k'] == 'highway':\n",
    "                    if y['@v'] in hwTypes:\n",
    "                        streetsDB.insert(data)\n",
    "                        break\n",
    "\n",
    "    del data\n",
    "    del keys\n",
    "    gc.collect()\n",
    "'''\n",
    "#\n",
    "context = etree.iterparse('../data/muenchen.osm', tag=['way','node','relation'] )\n",
    "#context = etree.iterparse('../data/muenchen.osm', tag='node' )\n",
    "fast_iter(context,process_element)\n",
    "#fast_iter(context,process_node)\n",
    "fnode.close()\n",
    "fway.close()\n",
    "frelation.close()\n"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "class TitleTarget(object):\n",
    "    def __init__(self):\n",
    "        self.text = []\n",
    "    def start(self, tag, attrib):\n",
    "        self.is_title = True if tag == 'Title' else False\n",
    "    def end(self, tag):\n",
    "        pass\n",
    "    def data(self, data):\n",
    "        if self.is_title:\n",
    "            self.text.append(data.encode('utf-8'))\n",
    "    def close(self):\n",
    "        return self.text\n",
    "\n",
    "parser = etree.XMLParser(target = TitleTarget())\n",
    "\n",
    "# This and most other samples read in the Google copyright data\n",
    "infile = 'copyright.xml'\n",
    "\n",
    "results = etree.parse(infile, parser)    \n",
    "\n",
    "# When iterated over, 'results' will contain the output from \n",
    "# target parser's close() method\n",
    "\n",
    "out = open('titles.txt', 'w')\n",
    "out.write('\\n'.join(results))\n",
    "out.close()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
