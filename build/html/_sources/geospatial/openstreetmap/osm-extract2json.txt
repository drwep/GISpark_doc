{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# OSM文件对象数据分类捡取器\n",
    "\n",
    "[OpenStreetMap](http://www.openstreetmap.org)OSM文件对象数据分类捡取器，实现店、线、面文件的分拣，并进一步转为JSON格式和csv格式，从而可以在Spark中进行快速处理和深度分析。\n",
    "\n",
    "主要功能：\n",
    "\n",
    "* 输出三个单行存储的json文件，可在[Spark](http://spark.apache.org)中使用，通过spark的sc.read.json()直接读入处理。\n",
    "* 将osm文件按照tag快速分类，直接转为node/way/relation三个json文件，并按行存储。\n",
    "\n",
    "说明：\n",
    "* Spark默认按行处理，因此处理xml尤其是多行XML比较麻烦，如OpenStreetMap的OSM格式。  \n",
    "* 对于xml文件较大、无法全部载入内存的情况，需要预处理成行方式，然后在Spark中分布式载入。  \n",
    "\n",
    "\n",
    "后续工作：\n",
    "\n",
    "    1、映射way的nd节点坐标，构建出几何对象的坐标串。  \n",
    "    2、每一几何对象数据转为wkt格式，保存到JSON的geometry域。  \n",
    "    3、数据表按区域分割后，转为GeoPandas，然后进一步转为shape file。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#!/usr/bin/python\n",
    "#coding=utf-8"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### XML快速转为JSON格式，使用lxml进行流式处理。\n",
    "* 流方式递归读取xml结构数据（占用资源少）: http://www.ibm.com/developerworks/xml/library/x-hiperfparse/  \n",
    "* XML字符串转为json对象支持库 : https://github.com/martinblech/xmltodict  \n",
    "    * xmltodict.parse()会将字段名输出添加@和#，在Spark查询中会引起问题，需要去掉。如下设置即可： \n",
    "        xmltodict.parse(elem_data,attr_prefix=\"\",cdata_key=\"\")\n",
    "    * 编码和错误xml文件恢复，如下：\n",
    "        magical_parser = lxml.etree.XMLParser(encoding='utf-8', recover=True)  \n",
    "        tree = etree.parse(StringIO(your_xml_string), magical_parser) #or pass in an open file object\n",
    "    * 先将element转为string，然后生成dict，再用json.dump()产生json字符串。\n",
    "        elem_data = etree.tostring(elem)\n",
    "        elem_dict = xmltodict.parse(elem_data)\n",
    "        elem_jsonStr = json.dumps(elem_dict)\n",
    "    * 可以使用json.loads(elem_jsonStr)创建出可编程的json对象。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "import os\n",
    "import time\n",
    "import json\n",
    "from pprint import *\n",
    "\n",
    "import lxml\n",
    "from lxml import etree\n",
    "import xmltodict, sys, gc\n",
    "from pymongo import MongoClient\n",
    "\n",
    "gc.enable() #Enable Garbadge Collection\n",
    "\n",
    "# 将指定tag的对象提取，写入json文件。 \n",
    "def process_element(elem):\n",
    "    elem_data = etree.tostring(elem)\n",
    "    elem_dict = xmltodict.parse(elem_data,attr_prefix=\"\",cdata_key=\"\")\n",
    "    #print(elem_dict)\n",
    "    \n",
    "    if (elem.tag == \"node\"): \n",
    "        elem_jsonStr = json.dumps(elem_dict[\"node\"])\n",
    "        fnode.write(elem_jsonStr + \"\\n\")\n",
    "    elif (elem.tag == \"way\"): \n",
    "        elem_jsonStr = json.dumps(elem_dict[\"way\"])\n",
    "        fway.write(elem_jsonStr + \"\\n\")\n",
    "    elif (elem.tag == \"relation\"): \n",
    "        elem_jsonStr = json.dumps(elem_dict[\"relation\"])\n",
    "        frelation.write(elem_jsonStr + \"\\n\")\n",
    "\n",
    "# 遍历所有对象，然后调用process_element处理。\n",
    "# 迭代处理，func为迭代的element处理函数。\n",
    "def fast_iter(context, func_element, maxline):\n",
    "    placement = 0\n",
    "    try:\n",
    "        for event, elem in context:\n",
    "            placement += 1\n",
    "            if (maxline > 0):  # 最多的转换对象限制，大数据调试时使用于抽样检查。 \n",
    "                print(etree.tostring(elem))\n",
    "                if (placement >= maxline): break\n",
    "\n",
    "            func_element(elem)  #处理每一个元素,调用process_element.      \n",
    "            elem.clear()\n",
    "            while elem.getprevious() is not None:\n",
    "               del elem.getparent()[0]\n",
    "    except Exception as ex:\n",
    "        print(time.strftime(ISOTIMEFORMAT),\", Error:\",ex)\n",
    "        \n",
    "    del context"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 执行osm的xml到json转换，一次扫描提取为三个文件。  \n",
    "* context = etree.iterparse(osmfile,tag=[\"node\",\"way\"])的**tag**参数必须要给值，否则取出来的sub element全部是none。  \n",
    "* 使用了3个打开的全局文件：fnode、fway、frelation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "#maxline = 0  #抽样调试使用，最多转换的对象，设为0则转换文件的全部。\n",
    "def transform(osmfile,maxline = 0):\n",
    "    ISOTIMEFORMAT=\"%Y-%m-%d %X\"\n",
    "    print(time.strftime( ISOTIMEFORMAT),\", Process osm XML...\",osmfile,\" =>MaxLine:\",maxline)\n",
    "\n",
    "    global fnode\n",
    "    global fway\n",
    "    global frelation\n",
    "    \n",
    "    fnode = open(osmfile + \"_node.json\",\"w+\")\n",
    "    fway = open(osmfile + \"_way.json\",\"w+\")\n",
    "    frelation = open(osmfile + \"_relation.json\",\"w+\")\n",
    "\n",
    "    context = etree.iterparse(osmfile,tag=[\"node\",\"way\",\"relation\"])\n",
    "    fast_iter(context, process_element, maxline)\n",
    "\n",
    "    fnode.close()\n",
    "    fway.close()\n",
    "    frelation.close()\n",
    "\n",
    "    print(time.strftime( ISOTIMEFORMAT),\", OSM to JSON, Finished.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 执行转换。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2016-05-04 16:18:37 , Process osm XML... ../data/osm/muenchen.osm  =>MaxLine: 0\n",
      "2016-05-04 16:18:38 , Error: attributes construct error, line 51046, column 44\n",
      "2016-05-04 16:18:38 , OSM to JSON, Finished.\n"
     ]
    }
   ],
   "source": [
    "# 需要处理的osm文件名，自行修改。\n",
    "osmfile = '../data/osm/muenchen.osm'\n",
    "transform(osmfile,0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 保存到MongoDB等其它存储系统(待续)。"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "client = MongoClient()\n",
    "db = client.re\n",
    "streetsDB = db.streets\n",
    "hwTypes = ['motorway', 'trunk', 'primary', 'secondary', 'tertiary', 'pedestrian', 'unclassified', 'service']\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
