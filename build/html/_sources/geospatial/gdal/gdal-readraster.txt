{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#!/usr/bin/python\n",
    "#coding=utf-8"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 用GDAL读取栅格数据\n",
    "by [openthings@163.com](http://my.oschina.net/u/2306127/blog?catalog=3420733), 2016-04-25."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### GDAL可以读取多种栅格数据文件，然后使用numpy之类的库进行处理。\n",
    "GDAL (http://www.gdal.org) 原生支持超过100种栅格数据类型，涵盖所有主流GIS与RS数据格式，包括:\n",
    "*   TIFF, GeoTIFF, JPEG, JPEG2000, PNG, GIF, BMP, ECW, MrSID    \n",
    "*   HDF4, HDF5  \n",
    "*   USGS DOQ, USGS DEM  \n",
    "*   GRASS, Idrisi, ENVI, Imagine   \n",
    "*   ArcInfo grids, ArcSDE raster\n",
    "\n",
    "完整的文件格式支持列表可以参考 http://www.gdal.org/formats_list.html"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1、读取图像文件\n",
    "#### 引用GDAL支持库。\n",
    "* 旧版本（1.5以前）： import gdal, gdalconst\n",
    "* 新版本（1.6以后）： from osgeo import gdal, gdalconst  \n",
    "\n",
    "gdal和gdalconst最好都要导入，其中gdalconst中的常量都加了前缀，力图与其他的module冲突最小。所以对gdalconst你可以直接这样导入："
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "from osgeo import gdal, gdalconst\n",
    "from osgeo.gdalconst import *\n",
    "import gdal, gdalconst"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 加载GDAL数据驱动。\n",
    "与OGR数据驱动类似，需要先创建某一类型的数据驱动，再创建响应的栅格数据集。 \n",
    "* 一次性注册所有的数据驱动，但是只能读不能写：gdal.AllRegister()   \n",
    "* 单独注册某一类型的数据驱动，这样的话可以读也可以写，可以新建数据集："
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "driver = gdal.GetDriverByName('HFA')\n",
    "driver.Register()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 打开SRTM."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "fn = '../data/N00E018.hgt'\n",
    "ds = gdal.Open(fn, GA_ReadOnly)\n",
    "if ds is None:\n",
    "   print('Could not open ' + fn)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Info: X-1201, Y-1201, BAND-1\n"
     ]
    }
   ],
   "source": [
    "cols = ds.RasterXSize\n",
    "rows = ds.RasterYSize\n",
    "bands = ds.RasterCount\n",
    "print(\"Info: X-%d, Y-%d, BAND-%d\"%(cols,rows,bands))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'numpy.ndarray'>\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([[330, 326, 329, 331, 327, 328, 330, 328, 329, 326],\n",
       "       [331, 330, 327, 329, 328, 327, 329, 328, 331, 325],\n",
       "       [330, 330, 331, 329, 329, 326, 328, 328, 327, 327],\n",
       "       [329, 330, 330, 333, 331, 328, 327, 328, 325, 327],\n",
       "       [328, 329, 332, 330, 329, 327, 326, 326, 325, 326],\n",
       "       [329, 328, 331, 332, 327, 325, 325, 326, 324, 324],\n",
       "       [330, 329, 330, 331, 328, 326, 326, 327, 326, 326],\n",
       "       [332, 327, 329, 329, 328, 326, 326, 325, 326, 324],\n",
       "       [328, 329, 330, 331, 331, 328, 324, 325, 325, 324],\n",
       "       [329, 330, 329, 332, 331, 329, 327, 326, 326, 326]], dtype=int16)"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "band = ds.GetRasterBand(1)\n",
    "data = band.ReadAsArray(0, 0, 10, 10)\n",
    "print(type(data))\n",
    "data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 打开已有的栅格数据集。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Could not open aster.img\n"
     ]
    }
   ],
   "source": [
    "fn = 'aster.img'\n",
    "ds = gdal.Open(fn, GA_ReadOnly)\n",
    "if ds is None:\n",
    "   print('Could not open ' + fn)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 读取栅格数据集的x方向像素数，y方向像素数，和波段数.\n",
    "注意后面没有括号，因为他们是属性(properties)不是方法(methods) 读取地理坐标参考信息(georeference info)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "'NoneType' object has no attribute 'RasterXSize'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-21-d141404f16c4>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mcols\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mds\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mRasterXSize\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      2\u001b[0m \u001b[0mrows\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mds\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mRasterYSize\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      3\u001b[0m \u001b[0mbands\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mds\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mRasterCount\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mAttributeError\u001b[0m: 'NoneType' object has no attribute 'RasterXSize'"
     ]
    }
   ],
   "source": [
    "cols = ds.RasterXSize\n",
    "rows = ds.RasterYSize\n",
    "bands = ds.RasterCount"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2、图像几何变换\n",
    "\n",
    "GeoTransform是一个list，存储着栅格数据集的地理坐标信息\n",
    "\n",
    ">1. adfGeoTransform[0] /* top left x 左上角x坐标*/  \n",
    "* adfGeoTransform[1] /* w--e pixel resolution 东西方向上的像素分辨率*/  \n",
    "* adfGeoTransform[2] /* rotation, 0 if image is \"north up\" 如果北边朝上，地图的旋转角度*/\n",
    "* adfGeoTransform[3] /* top left y 左上角y坐标*/\n",
    "* adfGeoTransform[4] /* rotation, 0 if image is \"north up\" 如果北边朝上，地图的旋转角度*/\n",
    "* adfGeoTransform[5] /* n-s pixel resolution 南北方向上的像素分辨率*/  \n",
    "\n",
    "** _注意栅格数据集的坐标一般都是以左上角为基准的。_ **\n",
    "\n",
    "下面的例子是从一个栅格数据集中取出Geotransform作为一个list，然后读取其中的数据:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "geotransform = ds.GetGeoTransform()\n",
    "originX = geotransform[0]\n",
    "originY = geotransform[3]originY = geotransform[3]\n",
    "pixelWidth = geotransform[1]\n",
    "pixelHeight = geotransform[5]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "计算某一坐标对应像素的相对位置(pixel offset)，也就是该坐标与左上角的像素的相对位置，按像素数计算，计算公式如下："
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "xOffset = int((x – originX) / pixelWidth)\n",
    "yOffset = int((y – originY) / pixelHeight)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "读取某一像素点的值，需要分两步:  \n",
    "* 首先读取一个波段(band)：GetRasterBand(<index>)，其参数为波段的索引号。 \n",
    "* 然后用ReadAsArray(<xoff>, <yoff>, <xsize>, <ysize>)，读出从(xoff,yoff)开始，大小为(xsize,ysize)的矩阵。  \n",
    "\n",
    "如果将矩阵大小设为1X1，就是读取一个像素了。\n",
    "但是这一方法只能将读出的数据放到矩阵中，就算只读取一个像素也是一样。例如："
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3、图像的波段读取"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "'NoneType' object has no attribute 'GetRasterBand'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-22-4cf56c37d9db>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mband\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mds\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mGetRasterBand\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      2\u001b[0m \u001b[0mdata\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mband\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mReadAsArray\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mxOffset\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0myOffset\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m1\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m1\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mAttributeError\u001b[0m: 'NoneType' object has no attribute 'GetRasterBand'"
     ]
    }
   ],
   "source": [
    "band = ds.GetRasterBand(1)\n",
    "data = band.ReadAsArray(xOffset, yOffset, 1, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "如果想一次读取一整张图，那么将offset都设定为0，size则设定为整个图幅的size，例如：\n",
    ">data = band.ReadAsArray(0, 0, cols, rows)\n",
    "\n",
    "但是要注意:\n",
    "* 从data中读取某一像素的值，必须要用data[yoff, xoff]。\n",
    "* 注意不要搞反了。数学中的矩阵是[row,col]，而这里恰恰相反！这里面row对应y轴，col对应x轴。\n",
    "* 注意在适当的时候释放内存，例如band = None 或者dataset = None。尤其当图很大的时候。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 如何更有效率的读取栅格数据？\n",
    "显然一个一个的读取效率非常低，将整个栅格数据集都塞进二维数组也不是个好办法，因为这样占的内存还是很多。  \n",
    "更好的方法是按块(block)来存取数据，只把要用的那一块放进内存。本周的样例代码中有一个utils模块，可以读取block大小。  \n",
    "** _例如：_**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import utils\n",
    "blockSize = utils.GetBlockSize(band)\n",
    "xBlockSize = blockSize[0]\n",
    "yBlockSize = blockSize[1]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 平铺(tiled)，即栅格数据按block存储。  \n",
    "有的格式，例如GeoTiff没有平铺，一行是一个block。Erdas imagine格式则按64x64像素平铺。如果一行是一个block，那么按行读取是比较节省资源的。如果是平铺的数据结构，那么设定ReadAsArray()的参数值，让它一次只读入一个block，就是效率最高的方法了。例如："
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'band' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-10-3fa2757ce0b9>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[0;32m     14\u001b[0m             \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     15\u001b[0m                 \u001b[0mnumCols\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mcolsnumCols\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mcols\u001b[0m \u001b[1;33m-\u001b[0m \u001b[0mj\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 16\u001b[1;33m             \u001b[0mdata\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mband\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mReadAsArray\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mj\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mi\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mnumCols\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mnumRows\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     17\u001b[0m \u001b[1;31m#这一段代码具有通用性，可以时常拿来用的。\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mNameError\u001b[0m: name 'band' is not defined"
     ]
    }
   ],
   "source": [
    "rows = 13\n",
    "cols = 11\n",
    "xBSize = 5\n",
    "yBSize = 5\n",
    "\n",
    "for i in range(0, rows, yBSize):\n",
    "    if i + yBSize < rows:\n",
    "        numRows = yBSize\n",
    "    else:\n",
    "        numRows = rows - i\n",
    "        for j in range(0, cols, xBSize):\n",
    "            if j + xBSize < cols:\n",
    "                numCols = xBSize\n",
    "            else:\n",
    "                numCols = colsnumCols = cols - j\n",
    "            data = band.ReadAsArray(j, i, numCols, numRows)\n",
    "#这一段代码具有通用性，可以时常拿来用的。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 二维数组的处理技巧\n",
    "图像数据的内存结构实质是一个二维数组。这里要用到两个库，Numeric比较老了，FWTools用它；numpy功能很强，是科学计算标准配置。 \n",
    "#### 数据类型转换"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "data = band.ReadAsArray(j, i, nCols, nRows)\n",
    "data = data.astype(Numeric.Float) # Numeric\n",
    "data = data.astype(numpy.float) # numpy\n",
    "\n",
    "#或者简单点只写一句\n",
    "#data = band.ReadAsArray(j, i, nCols, nRows).astype(Numeric.Float)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 掩膜－mask\n",
    "这是Numeric和numpy库的功能，输入一个数组和条件，输出一个二值数组。  \n",
    "例如：mask = Numeric.greater(data, 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "mask = Numeric.greater(data, 0)\n",
    "a = Numeric.array([0, 4, 6, 0, 2])\n",
    "print(a)\n",
    "#[0 4 6 0 2]\n",
    "\n",
    "mask = Numeric.greater(a, 0)\n",
    "print(mask)\n",
    "#[0 1 1 0 1]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 数组求和"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "a = Numeric.array([0, 4, 6, 0, 2])\n",
    "print a\n",
    "#[0 4 6 0 2]\n",
    "\n",
    "print(Numeric.sum(a))\n",
    "#12"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 如果是二维数组，那sum就会返回一个一维数组。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'Numeric' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-13-62e96942588b>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mb\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mNumeric\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0marray\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0ma\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m[\u001b[0m\u001b[1;36m5\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m10\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m0\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m3\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m0\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      2\u001b[0m \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mb\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      3\u001b[0m \u001b[1;31m#[[ 0      4  6  0  2]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      4\u001b[0m \u001b[1;31m#[ 5 10  0  3  0]]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      5\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mNameError\u001b[0m: name 'Numeric' is not defined"
     ]
    }
   ],
   "source": [
    "b = Numeric.array([a, [5, 10, 0, 3, 0]])\n",
    "print(b)\n",
    "#[[ 0      4  6  0  2]\n",
    "#[ 5 10  0  3  0]]\n",
    "\n",
    "print(Numeric.sum(b))\n",
    "print(Numeric.sum(b))\n",
    "#[ 5 14  6  3  2]\n",
    "\n",
    "#所以，二维数组的求和就要这样:\n",
    "print(Numeric.sum(Numeric.sum(b)))\n",
    "#30\n",
    "\n",
    "#这里有一个小技巧，统计大于0的像素个数，可以联合运用mask和sum两个函数:\n",
    "print(a)\n",
    "#[0 4 6 0 2]\n",
    "\n",
    "mask = Numeric.greater(a, 0)\n",
    "print(mask)\n",
    "#[0 1 1 0 1]\n",
    "print(Numeric.sum(mask))\n",
    "#3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
