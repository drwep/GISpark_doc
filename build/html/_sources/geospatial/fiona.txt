{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Fiona－地图文件读写Python库\n",
    "\n",
    "Fiona提供几何对象的文件读写功能，是基于OGR实现的简洁的Python API对象接口，详情可以查看[文档](http://toblerity.org/fiona/README.html#usage)和[源代码](https://github.com/Toblerity/Fiona)、[例程](https://github.com/Toblerity/Fiona/tree/master/examples)。\n",
    "\n",
    "Fiona 是 OGR的简洁、灵活, 规范的 Python API。Fiona 设计为简单而可靠的支持库，聚焦在使用标准的Python IO风格进行数据的读写，使用Python的list/dict等方法代替OGR的类对象访问。Fiona 支持多层的GIS数据格式的读写，以及压缩的虚拟文件系统并且与其它的Python GIS软件整合到一起，如Shapely、pyproj、Rtree等。\n",
    "\n",
    "## 用法\n",
    "\n",
    "### Collections\n",
    "\n",
    "从fiona.open()函数中返回Collection对象，可以进行记录（Records）的读写。Records被映射为GeoJSON格式。Fiona本身不包含任何空间操作方法，几何和空间操作可以通过Shapely或类似的库来实现。下面是一个例子："
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "import fiona\n",
    "\n",
    "# Register format drivers with a context manager\n",
    "with fiona.drivers():\n",
    "\n",
    "    # Open a file for reading. We'll call this the \"source.\"\n",
    "    with fiona.open('docs/data/test_uk.shp') as source:\n",
    "\n",
    "        # The file we'll write to, the \"sink\", must be initialized\n",
    "        # with a coordinate system, a format driver name, and\n",
    "        # a record schema.  We can get initial values from the open\n",
    "        # collection's ``meta`` property and then modify them as\n",
    "        # desired.\n",
    "\n",
    "        meta = source.meta\n",
    "        meta['schema']['geometry'] = 'Point'\n",
    "\n",
    "        # Open an output file, using the same format driver and\n",
    "        # coordinate reference system as the source. The ``meta``\n",
    "        # mapping fills in the keyword parameters of fiona.open().\n",
    "\n",
    "        with fiona.open('test_write.shp', 'w', **meta) as sink:\n",
    "\n",
    "            # Process only the records intersecting a box.\n",
    "            for f in source.filter(bbox=(-5.0, 55.0, 0.0, 60.0)):\n",
    "\n",
    "                # Get a point on the boundary of the record's\n",
    "                # geometry.\n",
    "\n",
    "                f['geometry'] = {\n",
    "                    'type': 'Point',\n",
    "                    'coordinates': f['geometry']['coordinates'][0][0]}\n",
    "\n",
    "                # Write the record out.\n",
    "                sink.write(f)\n",
    "\n",
    "    # The sink's contents are flushed to disk and the file is\n",
    "    # closed when its ``with`` block ends. This effectively\n",
    "    # executes ``sink.flush(); sink.close()``.\n",
    "\n",
    "# At the end of the ``with fiona.drivers()`` block, context\n",
    "# manager exits and all drivers are de-registered."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "函数 fiona.drivers() 和 context manager 在 1.1版本中引入。上面的例子显示了register and de-register drivers的方法。Fiona 1.0 仍然可以工作: 打开的collections管理global driver registry，如果没有其它的manager。\n",
    "\n",
    "### Reading Multilayer data\n",
    "\n",
    "Collections可以从单个的layers中创建，Layer可以位于多层的文件或目录。 目标layer通过名称或索引号进行指定。函数fiona.listlayers()返回给定文件或目录的所有层的列表，如下所示。\n",
    "\n",
    "    with fiona.drivers():\n",
    "\n",
    "        for layername in fiona.listlayers('docs/data'):\n",
    "            with fiona.open('docs/data', layer=layername) as c:\n",
    "                print(layername, len(c))\n",
    "\n",
    "    # Output:\n",
    "    # test_uk 48\n",
    "\n",
    "Layer 可以按照index指定。在这里，layer=0 和 layer='test_uk' 指定的是同一个layer。如下所示：\n",
    "\n",
    "    with fiona.drivers():\n",
    "\n",
    "        for i, layername in enumerate(fiona.listlayers('docs/data')):\n",
    "            with fiona.open('docs/data', layer=i) as c:\n",
    "                print(i, layername, len(c))\n",
    "\n",
    "    # Output:\n",
    "    # 0 test_uk 48"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Writing Multilayer data\n",
    "\n",
    "Multilayer数据可以同样地被写入。写入时，Layers 必须按照名称指定。下面写入一个shape文件:\n",
    "\n",
    "    with fiona.drivers():\n",
    "\n",
    "        with open('docs/data/test_uk.shp') as c:\n",
    "            meta = c.meta\n",
    "            f = next(c)\n",
    "\n",
    "        with fiona.open('/tmp/foo', 'w', layer='bar', **meta) as c:\n",
    "            c.write(f)\n",
    "\n",
    "        print(fiona.listlayers('/tmp/foo'))\n",
    "        # Output: ['bar']\n",
    "\n",
    "        with fiona.open('/tmp/foo', layer='bar') as c:\n",
    "            print(len(c))\n",
    "            f = next(c)\n",
    "            print(f['geometry']['type'])\n",
    "            print(f['properties'])\n",
    "\n",
    "        # Output:\n",
    "        # 1\n",
    "        # Polygon\n",
    "        # {'FIPS_CNTRY': 'UK', 'POP_CNTRY': 60270708.0, 'CAT': 232.0,\n",
    "        #  'AREA': 244820.0, 'CNTRY_NAME': 'United Kingdom'}\n",
    "\n",
    "所创建的文件在 /tmp/foo 目录，如下：\n",
    "\n",
    "    $ ls /tmp/foo\n",
    "    \n",
    "    bar.cpg bar.dbf bar.prj bar.shp bar.shx"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 虚拟文件系统和压缩包\n",
    "\n",
    "Zip 和 Tar 归档文件可以被作为虚拟文件系统对待处理。换句话说，Fiona可以支持压缩的ShapeFiles的读写。如下所示：\n",
    "\n",
    "    with fiona.drivers():\n",
    "\n",
    "        for i, layername in enumerate(\n",
    "            fiona.listlayers('/',vfs='zip://docs/data/test_uk.zip')):\n",
    "            \n",
    "            with fiona.open(\n",
    "                '/',vfs='zip://docs/data/test_uk.zip',layer=i) as c:\n",
    "                \n",
    "                print(i, layername, len(c))\n",
    "\n",
    "    # Output:\n",
    "    # 0 test_uk 48"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Fiona CLI\n",
    "\n",
    "Fiona’s 命令行界面工具“fio”, 文档描述在 docs/cli.rst. 下面使用fio info列出数据文件的信息。\n",
    "\n",
    "    $ fio info docs/data/test_uk.shp\n",
    "    { 'bbox': (-8.621389, 49.911659, 1.749444, 60.844444),\n",
    "      'count': 48,\n",
    "      'crs': { u'datum': u'WGS84', u'no_defs': True, u'proj': u'longlat'},\n",
    "      'driver': u'ESRI Shapefile',\n",
    "      'schema': { 'geometry': 'Polygon',\n",
    "                  'properties': OrderedDict([(u'CAT', 'float:16'), (u'FIPS_CNTRY', 'str:80'), (u'CNTRY_NAME', 'str:80'), (u'AREA', 'float:15.2'), (u'POP_CNTRY', 'float:15.2')])}}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 安装Fiona\n",
    "\n",
    "Fiona 要求 Python 2.6, 2.7, 3.3, 或 3.4 和 GDAL/OGR 1.8以上版本。从源代码编译需要 C 编译器以及 GDAL 和 Python 开发头文件和支持库文件 (libgdal1-dev for Debian/Ubuntu, gdal-dev for CentOS/Fedora).\n",
    "\n",
    "在OS X上，Kyngchaos GDAL frameworks 可以提供GDAL/OGR在OS X上的依赖软件包，或使用Homebrew (brew install gdal) 进行安装。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* Python Requirements\n",
    "\n",
    "Fiona 依赖于模块 six 和 argparse。Easy_install 和 pip 将自动下载和安装依赖文件，但Windows用户可能需要单独下载安装。\n",
    "\n",
    "* Unix-like systems\n",
    "\n",
    "如果正在使用 virtualenv (如果没有, 跳过下面的4个命令) ，GDAL/OGR libraries, headers, 和 gdal-config 等程序都安装在缺省的位置:\n",
    "\n",
    "```\n",
    "    $ mkdir fiona_env\n",
    "    $ virtualenv fiona_env  \n",
    "    $ source fiona_env/bin/activate  \n",
    "    (fiona_env)$ pip install Fiona\n",
    "```\n",
    "\n",
    "如果 gdal-config 不可用或者 GDAL/OGR 头和库文件没有安装在缺省位置就必须自行设定include dirs, library dirs, 和 libraries选项，在setup.cfg 文件或者 setup 命令行设置(使用 git)，如下所示:\n",
    "\n",
    "(fiona_env)$ git clone git://github.com/Toblerity/Fiona.git\n",
    "(fiona_env)$ cd Fiona\n",
    "(fiona_env)$ python setup.py build_ext -I/path/to/gdal/include -L/path/to/gdal/lib -lgdal install\n",
    "\n",
    "* Windows\n",
    "\n",
    "二进制安装包在 http://www.lfd.uci.edu/~gohlke/pythonlibs/#fiona 或者通过 PyPI 获得。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Development and testing\n",
    "\n",
    "从源码构建需要Cython，测试需要Nose。如果GDAL/OGR libraries, headers, 和 gdal-config 程序安装在缺省位置，如下方式安装:\n",
    "\n",
    "```\n",
    "    (fiona_env)$ git clone git://github.com/Toblerity/Fiona.git\n",
    "    (fiona_env)$ cd Fiona\n",
    "    (fiona_env)$ python setup.py develop\n",
    "    (fiona_env)$ nosetests\n",
    "```\n",
    "\n",
    "如果是一个非标准的环境，需要制定 include 和 lib 目录以及 GDAL library目录。编译命令行如下：\n",
    "\n",
    "(fiona_env)$ python setup.py build_ext -I/path/to/gdal/include -L/path/to/gdal/lib -lgdal develop\n",
    "(fiona_env)$ nosetests"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
