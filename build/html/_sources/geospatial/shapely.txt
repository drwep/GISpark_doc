{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Shapely-几何对象操作的Python库"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Shapely提供地理几何对象数据结构、编解码及对象之间的几何代数运算，支持WKT和JSON的几何对象编解码。[Downloads](http://pypi.python.org/pypi/Shapely/#downloads)\n",
    "\n",
    "Shapely是基于笛卡尔坐标系进行几何对象的操作和几何分析Python库，使用BSD许可。\n",
    "It is based on the widely deployed GEOS (the engine of PostGIS) and JTS (from which GEOS is ported) libraries. Shapely is not concerned with data formats or coordinate systems, but can be readily integrated with packages that are. For more details, see:\n",
    "\n",
    "[Shapely on GitHub](https://github.com/Toblerity/Shapely.git)\n",
    "\n",
    "[Shapely manual](http://toblerity.github.com/shapely/manual.html)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 安装Shapely\n",
    "\n",
    "Shapely 1.5.x 要求：\n",
    "\n",
    "    Python >=2.6 (including Python 3.x)\n",
    "\n",
    "    GEOS >=3.3 (Shapely 1.2.x requires only GEOS 3.1 but YMMV)\n",
    "\n",
    "* 安装Shapely：\n",
    "\n",
    "Windows用户直接下载可执行文件安装： http://www.lfd.uci.edu/~gohlke/pythonlibs/#shapely 。\n",
    "\n",
    "其它系统, 需要先安装GEOS (在OS X上运行`brew install geos`  或在Debian/Ubuntu上 `apt-get install libgeos-dev`), 然后运行下面的命令安装Shapely。\n",
    "\n",
    "    $ pip install shapely\n",
    "\n",
    "如果已经安装GEOS到非缺省的目录位置, `geos-config` 程序可以获得编译器和连接器的选项信息。如果没有在PATH中设置，可以通过`GEOS_CONFIG` 环境变量进行设置：\n",
    "\n",
    "    $ GEOS_CONFIG=/path/to/geos-config \n",
    "    pip install shapely\n",
    "\n",
    "\n",
    "如果系统中GEOS版本< 3.3.0，将不能使用Shapely 1.3以上版本，请使用下面的方法安装较低的版本。\n",
    "\n",
    "    $ pip install shapely<1.3\n",
    "\n",
    "\n",
    "如果使用pip 6+，使用以下方法安装：\n",
    "\n",
    "    $ pip install shapely~=1.2\n",
    "\n",
    "Shapely 提供流行的Python分发版的安装，如Canopy (Enthought) 和 Anaconda (Continuum Analytics)。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Shapely用法\n",
    "\n",
    "创建一个点对象，然后做缓冲区，形成一个圆，并计算圆的面积：\n",
    "\n",
    "    >>> from shapely.geometry import Point\n",
    "    \n",
    "    >>> patch = Point(0.0, 0.0).buffer(10.0)\n",
    "    >>> patch\n",
    "    <shapely.geometry.polygon.Polygon object at 0x...>\n",
    "    \n",
    "    >>> patch.area\n",
    "    313.65484905459385\n",
    "\n",
    "更多的例子和用法，参考 [Shapely使用手册](http://toblerity.github.com/shapely/manual.html) 和 [Shapely examples](https://github.com/sgillies/shapely/tree/master/shapely/examples)。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Shapely集成\n",
    "\n",
    "Shapely不提供文件读写接口, 但可以序列化和反序列化，支持一些常用的格式和协议。\n",
    "\n",
    "* WKT/WKB\n",
    "\n",
    "提供shapely.wkb和shapely.wkt支持数据的载入和保存。\n",
    "\n",
    "    >>> from shapely.wkt import dumps, loads\n",
    "\n",
    "    >>> dumps(loads('POINT (0 0)'))\n",
    "    'POINT (0.0000000000000000 0.0000000000000000)'\n",
    "\n",
    "* Numpy array\n",
    "\n",
    "所有的linear objects, 如polygon 的rings (类似上面的 patch )， 提供 Numpy array 访问接口：\n",
    "\n",
    "    >>> from numpy import asarray\n",
    "\n",
    "    >>> ag = asarray(patch.exterior)\n",
    "    >>> ag\n",
    "    array([[  1.00000000e+01,   0.00000000e+00],\n",
    "           [  9.95184727e+00,  -9.80171403e-01],\n",
    "           [  9.80785280e+00,  -1.95090322e+00],\n",
    "           ...\n",
    "           [  1.00000000e+01,   0.00000000e+00]])\n",
    "\n",
    "Numpy arrays 可以采用为 Shapely 的 linestrings 对象:\n",
    "\n",
    "    >>> from shapely.geometry import asLineString\n",
    "    \n",
    "    >>> asLineString(ag).length\n",
    "    62.806623139095073\n",
    "    \n",
    "    >>> asLineString(ag).wkt\n",
    "    'LINESTRING (10.0000000000000000 0.0000000000000000, ...)'\n",
    "\n",
    "* X,Y\n",
    "\n",
    "形成 Numpy array，结构为[x, y] 的 arrays对象。但这不是与 Matplotlib 准确配合的绘制对象，因此在Shapely 1.2添加了 xy 属性，分别获得x和y的值：\n",
    "\n",
    "    >>> x, y = patch.exterior.xy\n",
    "\n",
    "    >>> ax = asarray(x)\n",
    "    >>> ax\n",
    "    array([  1.00000000e+01,   9.95184727e+00,   9.80785280e+00,  ...])\n",
    "\n",
    "* GeoJSON\n",
    "\n",
    "Shapely可以和其它的Python GIS软件包使用类似GeoJSON的数据结构。\n",
    "\n",
    "    >>> import json\n",
    "    >>> from shapely.geometry import mapping, shape\n",
    "\n",
    "    >>> s = shape(json.loads('{\"type\": \"Point\", \"coordinates\": [0.0, 0.0]}'))\n",
    "    >>> s\n",
    "    <shapely.geometry.point.Point object at 0x...\n",
    "\n",
    "    >>>> print(json.dumps(mapping(s)))\n",
    "    {\"type\": \"Point\", \"coordinates\": [0.0, 0.0]}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 开发与测试\n",
    "\n",
    "开发Shapely的依赖文件列在requirements-dev.txt中。Cython 和 Numpy 在运行时不需要，但在开发时需要。强烈建议使用virtual environment进行开发和测试（如下所示），也可以使用Anaconda的Conda创建和使用虚拟环境。\n",
    "\n",
    "    $ virtualenv .\n",
    "    $ source bin/activate(env)\n",
    "    $ pip install -r requirements-dev.txt(env)\n",
    "    $ pip install -e .\n",
    "\n",
    "使用 py.test 去运行 Shapely’s 里面的 unittests 和 doctests。\n",
    "\n",
    "    (env)$ py.test tests"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
