{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# GeoJSON的python支持库。\n",
    "\n",
    "* IETF标准项目：https://github.com/geojson  \n",
    "* PyPi支持库: https://pypi.python.org/pypi/geojson  \n",
    "* 其它支持库包括：GeoPandas, Shaply, GDAL, GIScript"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from pprint import * "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Installation\n",
    "\n",
    "python-geojson is compatible with Python 2.6, 2.7, 3.2, 3.3, and 3.4. \n",
    "It is listed on PyPi as ‘geojson’. The recommended way to install is via pip:\n",
    "\n",
    ">pip install geojson\n",
    "\n",
    "## GeoJSON Objects\n",
    "\n",
    "This library implements all the GeoJSON Objects described in The GeoJSON Format Specification.\n",
    "\n",
    "## Point"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{\"coordinates\": [-115.81, 37.24], \"type\": \"Point\"}"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from geojson import Point\n",
    "\n",
    "Point((-115.81, 37.24))  # doctest: +ELLIPSIS"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Visualize the result of the example above here. General information about Point can be found in Section 2.1.2 and Appendix A: Point within The GeoJSON Format Specification.\n",
    "## MultiPoint"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{\"coordinates\": [[-155.52, 19.61], [-156.22, 20.74], [-157.97, 21.46]], \"type\": \"MultiPoint\"}"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from geojson import MultiPoint\n",
    "\n",
    "# doctest: +ELLIPSIS\n",
    "MultiPoint([(-155.52, 19.61), (-156.22, 20.74), (-157.97, 21.46)])\n",
    "\n",
    "#{\"coordinates\": [[-155.5..., 19.6...], [-156.2..., 20.7...], \n",
    "#[-157.9..., 21.4...]], \"type\": \"MultiPoint\"}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Visualize the result of the example above here. General information about MultiPoint can be found in Section 2.1.3 and Appendix A: MultiPoint within The GeoJSON Format Specification.\n",
    "## LineString"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{\"coordinates\": [[8.919, 44.4074], [8.923, 44.4075]], \"type\": \"LineString\"}\n"
     ]
    }
   ],
   "source": [
    "from geojson import LineString\n",
    "\n",
    "# doctest: +ELLIPSIS\n",
    "lstring = LineString([(8.919, 44.4074), (8.923, 44.4075)])  \n",
    "#{\"coordinates\": [[8.91..., 44.407...], [8.92..., 44.407...]], \n",
    "#\"type\": \"LineString\"}\n",
    "\n",
    "pprint(lstring)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Visualize the result of the example above here. General information about LineString can be found in Section 2.1.4 and Appendix A: LineString within The GeoJSON Format Specification.\n",
    "## MultiLineString"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'coordinates': [[(3.75, 9.25), (-130.95, 1.52)],\n",
      "                 [(23.15, -34.25), (-1.35, -4.65), (3.45, 77.95)]],\n",
      " 'type': 'MultiLineString'}\n"
     ]
    }
   ],
   "source": [
    "from geojson import MultiLineString\n",
    "\n",
    "mlstring = MultiLineString([\n",
    "[(3.75, 9.25), (-130.95, 1.52)],\n",
    "[(23.15, -34.25), (-1.35, -4.65), (3.45, 77.95)]\n",
    "])  # doctest: +ELLIPSIS\n",
    "#{\"coordinates\": [[[3.7..., 9.2...], [-130.9..., 1.52...]], [[23.1..., -34.2...],\n",
    "#[-1.3..., -4.6...], [3.4..., 77.9...]]], \"type\": \"MultiLineString\"}\n",
    "\n",
    "pprint(mlstring)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Visualize the result of the example above here. General information about MultiLineString can be found in Section 2.1.5 and Appendix A: MultiLineString within The GeoJSON Format Specification.\n",
    "## Polygon"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'coordinates': [[(2.38, 57.322),\n",
      "                  (23.194, -20.28),\n",
      "                  (-120.43, 19.15),\n",
      "                  (2.38, 57.322)]],\n",
      " 'type': 'Polygon'}\n",
      "{'coordinates': [[(2.38, 57.322),\n",
      "                  (23.194, -20.28),\n",
      "                  (-120.43, 19.15),\n",
      "                  (2.38, 57.322)],\n",
      "                 [(-5.21, 23.51),\n",
      "                  (15.21, -10.81),\n",
      "                  (-20.51, 1.51),\n",
      "                  (-5.21, 23.51)]],\n",
      " 'type': 'Polygon'}\n"
     ]
    }
   ],
   "source": [
    "from geojson import Polygon\n",
    "\n",
    "# no hole within polygon\n",
    "polya = Polygon([[(2.38, 57.322), (23.194, -20.28), (-120.43, 19.15), (2.38, 57.322)]])  # doctest: +ELLIPSIS\n",
    "#{\"coordinates\": [[[2.3..., 57.32...], [23.19..., -20.2...], [-120.4..., 19.1...]]], \"type\": \"Polygon\"}\n",
    "\n",
    "pprint(polya)\n",
    "\n",
    "# hole within polygon\n",
    "polyb = Polygon([\n",
    "[(2.38, 57.322), (23.194, -20.28), (-120.43, 19.15), (2.38, 57.322)],\n",
    "[(-5.21, 23.51), (15.21, -10.81), (-20.51, 1.51), (-5.21, 23.51)]\n",
    "])  # doctest: +ELLIPSIS\n",
    "#{\"coordinates\": [[[2.3..., 57.32...], [23.19..., -20.2...], [-120.4..., 19.1...]], \n",
    "#[[-5.2..., 23.5...], [15.2..., -10.8...], [-20.5..., 1.5...], [-5.2..., 23.5...]]], \"type\": \"Polygon\"}\n",
    "\n",
    "pprint(polyb)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Visualize the results of the example above here. General information about Polygon can be found in Section 2.1.6 and Appendix A: Polygon within The GeoJSON Format Specification.\n",
    "## MultiPolygon"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'coordinates': [([(3.78, 9.28),\n",
      "                   (-130.91, 1.52),\n",
      "                   (35.12, 72.234),\n",
      "                   (3.78, 9.28)],),\n",
      "                 ([(23.18, -34.29),\n",
      "                   (-1.31, -4.61),\n",
      "                   (3.41, 77.91),\n",
      "                   (23.18, -34.29)],)],\n",
      " 'type': 'MultiPolygon'}\n"
     ]
    }
   ],
   "source": [
    "from geojson import MultiPolygon\n",
    "\n",
    "mp = MultiPolygon([\n",
    "([(3.78, 9.28), (-130.91, 1.52), (35.12, 72.234), (3.78, 9.28)],),\n",
    "([(23.18, -34.29), (-1.31, -4.61), (3.41, 77.91), (23.18, -34.29)],)\n",
    "])  # doctest: +ELLIPSIS\n",
    "\n",
    "#{\"coordinates\": [[[[3.7..., 9.2...], [-130.9..., 1.5...], [35.1..., 72.23...]]], \n",
    "#[[[23.1..., -34.2...], [-1.3..., #-4.6...], [3.4..., 77.9...]]]], \"type\": \"MultiPolygon\"}\n",
    "\n",
    "pprint(mp)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Visualize the result of the example above here. General information about MultiPolygon can be found in Section 2.1.7 and Appendix A: MultiPolygon within The GeoJSON Format Specification.\n",
    "## GeometryCollection"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'geometries': [{\"coordinates\": [23.532, -63.12], \"type\": \"Point\"},\n",
      "                {'coordinates': [(-152.62, 51.21), (5.21, 10.69)],\n",
      "                 'type': 'LineString'}],\n",
      " 'type': 'GeometryCollection'}\n"
     ]
    }
   ],
   "source": [
    "from geojson import GeometryCollection, Point, LineString\n",
    "\n",
    "my_point = Point((23.532, -63.12))\n",
    "\n",
    "my_line = LineString([(-152.62, 51.21), (5.21, 10.69)])\n",
    "\n",
    "gc = GeometryCollection([my_point, my_line])  # doctest: +ELLIPSIS\n",
    "#{\"geometries\": [{\"coordinates\": [23.53..., -63.1...], \"type\": \"Point\"}, \n",
    "#{\"coordinates\": [[-152.6..., 51.2...], [5.2..., 10.6...]], \"type\": \"LineString\"}], \"type\": \"GeometryCollection\"}\n",
    "\n",
    "pprint(gc)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Visualize the result of the example above here. General information about GeometryCollection can be found in Section 2.1.8 and Appendix A: GeometryCollection within The GeoJSON Format Specification.\n",
    "## Feature"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'geometry': {\"coordinates\": [-3.68, 40.41], \"type\": \"Point\"},\n",
      " 'properties': {},\n",
      " 'type': 'Feature'}\n",
      "{'geometry': {\"coordinates\": [-3.68, 40.41], \"type\": \"Point\"},\n",
      " 'properties': {'country': 'Spain'},\n",
      " 'type': 'Feature'}\n",
      "{'geometry': {\"coordinates\": [-3.68, 40.41], \"type\": \"Point\"},\n",
      " 'id': 27,\n",
      " 'properties': {},\n",
      " 'type': 'Feature'}\n"
     ]
    }
   ],
   "source": [
    "from geojson import Feature, Point\n",
    "\n",
    "my_point = Point((-3.68, 40.41))\n",
    "\n",
    "f1 = Feature(geometry=my_point)  # doctest: +ELLIPSIS\n",
    "#{\"geometry\": {\"coordinates\": [-3.68..., 40.4...], \"type\": \"Point\"}, \"properties\": {}, \"type\": \"Feature\"}\n",
    "pprint(f1)\n",
    "\n",
    "f2 = Feature(geometry=my_point, properties={\"country\": \"Spain\"})  # doctest: +ELLIPSIS\n",
    "#{\"geometry\": {\"coordinates\": [-3.68..., 40.4...], \"type\": \"Point\"}, \"properties\": {\"country\": \"Spain\"}, \n",
    "#\"type\": \"Feature\"}\n",
    "pprint(f2)\n",
    "\n",
    "f3 = Feature(geometry=my_point, id=27)  # doctest: +ELLIPSIS\n",
    "#{\"geometry\": {\"coordinates\": [-3.68..., 40.4...], \"type\": \"Point\"}, \"id\": 27, \"properties\": {}, \"type\": \"Feature\"}\n",
    "pprint(f3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Visualize the results of the examples above here. General information about Feature can be found in Section 2.2 within The GeoJSON Format Specification.\n",
    "## FeatureCollection"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'features': [{'geometry': {\"coordinates\": [1.6432, -19.123], \"type\": \"Point\"},\n",
      "               'properties': {},\n",
      "               'type': 'Feature'},\n",
      "              {'geometry': {\"coordinates\": [-80.234, -22.532], \"type\": \"Point\"},\n",
      "               'properties': {},\n",
      "               'type': 'Feature'}],\n",
      " 'type': 'FeatureCollection'}\n"
     ]
    }
   ],
   "source": [
    "from geojson import Feature, Point, FeatureCollection\n",
    "\n",
    "my_feature = Feature(geometry=Point((1.6432, -19.123)))\n",
    "\n",
    "my_other_feature = Feature(geometry=Point((-80.234, -22.532)))\n",
    "\n",
    "fc = FeatureCollection([my_feature, my_other_feature])  # doctest: +ELLIPSIS\n",
    "#{\"features\": [{\"geometry\": {\"coordinates\": [1.643..., -19.12...], \"type\": \"Point\"}, \"properties\": {}, \"type\": #\"Feature\"}, {\"geometry\": {\"coordinates\": [-80.23..., -22.53...], \"type\": \"Point\"}, \"properties\": {}, \"type\": #\"Feature\"}], \"type\": \"FeatureCollection\"}\n",
    "\n",
    "pprint(fc)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Visualize the result of the example above here. General information about FeatureCollection can be found in Section 2.3 within The GeoJSON Format Specification.\n",
    "## GeoJSON encoding/decoding\n",
    "\n",
    "All of the GeoJSON Objects implemented in this library can be encoded and decoded into raw GeoJSON with the geojson.dump, geojson.dumps, geojson.load, and geojson.loads functions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{\"coordinates\": [43.24, -1.532], \"type\": \"Point\"}\n",
      "'{\"coordinates\": [43.24, -1.532], \"type\": \"Point\"}'\n",
      "{\"coordinates\": [43.24, -1.532], \"type\": \"Point\"}\n"
     ]
    }
   ],
   "source": [
    "import geojson\n",
    "\n",
    "my_point = geojson.Point((43.24, -1.532))\n",
    "\n",
    "pprint(my_point)  # doctest: +ELLIPSIS\n",
    "#{\"coordinates\": [43.2..., -1.53...], \"type\": \"Point\"}\n",
    "\n",
    "dump = geojson.dumps(my_point, sort_keys=True)\n",
    "\n",
    "pprint(dump)  # doctest: +ELLIPSIS\n",
    "#'{\"coordinates\": [43.2..., -1.53...], \"type\": \"Point\"}'\n",
    "\n",
    "gj = geojson.loads(dump)  # doctest: +ELLIPSIS\n",
    "#{\"coordinates\": [43.2..., -1.53...], \"type\": \"Point\"}\n",
    "pprint(gj)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Custom classes\n",
    "\n",
    "This encoding/decoding functionality shown in the previous can be extended to custom classes using the interface described by the __geo_interface__ Specification."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'{\"coordinates\": [52.235, -19.234], \"type\": \"Point\"}'"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import geojson\n",
    "\n",
    "class MyPoint():\n",
    "     def __init__(self, x, y):\n",
    "         self.x = x\n",
    "         self.y = y\n",
    "\n",
    "     @property\n",
    "     def __geo_interface__(self):\n",
    "         return {'type': 'Point', 'coordinates': (self.x, self.y)}\n",
    "\n",
    "point_instance = MyPoint(52.235, -19.234)\n",
    "\n",
    "geojson.dumps(point_instance, sort_keys=True)  # doctest: +ELLIPSIS\n",
    "#'{\"coordinates\": [52.23..., -19.23...], \"type\": \"Point\"}'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Helpful utilities\n",
    "### coords\n",
    "\n",
    "geojson.utils.coords yields all coordinate tuples from a geometry or feature object."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[(-152.62, 51.21), (5.21, 10.69)]"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import geojson\n",
    "\n",
    "my_line = LineString([(-152.62, 51.21), (5.21, 10.69)])\n",
    "\n",
    "my_feature = geojson.Feature(geometry=my_line)\n",
    "\n",
    "list(geojson.utils.coords(my_feature))  # doctest: +ELLIPSIS\n",
    "#[(-152.62..., 51.21...), (5.21..., 10.69...)]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### map_coords\n",
    "\n",
    "geojson.utils.map_coords maps a function over all coordinate tuples and returns a geometry of the same type. Useful for translating a geometry in space or flipping coordinate order."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'{\"coordinates\": [-57.905, 18.62], \"type\": \"Point\"}'"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import geojson\n",
    "\n",
    "new_point = geojson.utils.map_coords(lambda x: x/2, geojson.Point((-115.81, 37.24)))\n",
    "\n",
    "geojson.dumps(new_point, sort_keys=True)  # doctest: +ELLIPSIS\n",
    "#'{\"coordinates\": [-57.905..., 18.62...], \"type\": \"Point\"}'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### validation\n",
    "\n",
    "geojson.is_valid provides validation of GeoJSON objects."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "no\n",
      "the \"coordinates\" member must be a single position\n"
     ]
    }
   ],
   "source": [
    "import geojson\n",
    "\n",
    "validation = geojson.is_valid(geojson.Point((-3.68,40.41,25.14)))\n",
    "print(validation['valid'])\n",
    "#'no'\n",
    "\n",
    "print(validation['message'])\n",
    "#'the \"coordinates\" member must be a single position'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### generate_random\n",
    "\n",
    "geojson.utils.generate_random yields a geometry type with random data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{\"coordinates\": [[-4.454240116119678, -85.11096594745686], [-102.67726268531537, -21.1641373701423], [-175.4525855417237, 53.518811905348855]], \"type\": \"LineString\"}"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import geojson\n",
    "\n",
    "geojson.utils.generate_random(\"LineString\")  # doctest: +ELLIPSIS\n",
    "#{\"coordinates\": [...], \"type\": \"LineString\"}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Development\n",
    "\n",
    "To build this project, run python setup.py build. To run the unit tests, run python setup.py test."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
